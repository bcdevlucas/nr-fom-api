// tslint:disable
/**
 * FOM API
 * API for FOM backend
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  HttpHeaders,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from '../runtime';
import { ProjectDto, UpdateProjectDto } from '../models';

export interface ProjectControllerCreateRequest {
  projectDto: ProjectDto;
}

export interface ProjectControllerFindOneRequest {
  id: number;
}

export interface ProjectControllerRemoveRequest {
  id: number;
}

export interface ProjectControllerUpdateRequest {
  id: number;
  updateProjectDto: UpdateProjectDto;
}

/**
 * no description
 */
export class ProjectApi extends BaseAPI {
  /**
   */
  projectControllerCreate({
    projectDto,
  }: ProjectControllerCreateRequest): Observable<ProjectDto>;
  projectControllerCreate(
    { projectDto }: ProjectControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<ProjectDto>>;
  projectControllerCreate(
    { projectDto }: ProjectControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<ProjectDto | RawAjaxResponse<ProjectDto>> {
    throwIfNullOrUndefined(projectDto, 'projectDto', 'projectControllerCreate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<ProjectDto>(
      {
        url: '/api/project',
        method: 'POST',
        headers,
        body: projectDto,
      },
      opts ? opts.responseOpts : undefined
    );
  }

  /**
   */
  projectControllerFindOne({
    id,
  }: ProjectControllerFindOneRequest): Observable<ProjectDto>;
  projectControllerFindOne(
    { id }: ProjectControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<ProjectDto>>;
  projectControllerFindOne(
    { id }: ProjectControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<ProjectDto | RawAjaxResponse<ProjectDto>> {
    throwIfNullOrUndefined(id, 'id', 'projectControllerFindOne');

    return this.request<ProjectDto>(
      {
        url: '/api/project/{id}'.replace('{id}', encodeURI(id)),
        method: 'GET',
      },
      opts ? opts.responseOpts : undefined
    );
  }

  /**
   */
  projectControllerRemove({
    id,
  }: ProjectControllerRemoveRequest): Observable<object>;
  projectControllerRemove(
    { id }: ProjectControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<object>>;
  projectControllerRemove(
    { id }: ProjectControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<object | RawAjaxResponse<object>> {
    throwIfNullOrUndefined(id, 'id', 'projectControllerRemove');

    return this.request<object>(
      {
        url: '/api/project/{id}'.replace('{id}', encodeURI(id)),
        method: 'DELETE',
      },
      opts ? opts.responseOpts : undefined
    );
  }

  /**
   */
  projectControllerUpdate({
    id,
    updateProjectDto,
  }: ProjectControllerUpdateRequest): Observable<UpdateProjectDto>;
  projectControllerUpdate(
    { id, updateProjectDto }: ProjectControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UpdateProjectDto>>;
  projectControllerUpdate(
    { id, updateProjectDto }: ProjectControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<UpdateProjectDto | RawAjaxResponse<UpdateProjectDto>> {
    throwIfNullOrUndefined(id, 'id', 'projectControllerUpdate');
    throwIfNullOrUndefined(
      updateProjectDto,
      'updateProjectDto',
      'projectControllerUpdate'
    );

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<UpdateProjectDto>(
      {
        url: '/api/project/{id}'.replace('{id}', encodeURI(id)),
        method: 'PUT',
        headers,
        body: updateProjectDto,
      },
      opts ? opts.responseOpts : undefined
    );
  }
}
