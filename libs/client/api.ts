/* tslint:disable */
/* eslint-disable */
/**
 * FOM API
 * API for FOM backend
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface CreateAttachmentDto
 */
export interface CreateAttachmentDto {
  /**
   *
   * @type {number}
   * @memberof CreateAttachmentDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateAttachmentDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  fileName: string;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  fileContents: string;
  /**
   *
   * @type {number}
   * @memberof CreateAttachmentDto
   */
  projectId: number;
  /**
   *
   * @type {string}
   * @memberof CreateAttachmentDto
   */
  attachmentTypeCode: string;
}
/**
 *
 * @export
 * @interface CreateCutBlockDto
 */
export interface CreateCutBlockDto {
  /**
   *
   * @type {number}
   * @memberof CreateCutBlockDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateCutBlockDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateCutBlockDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateCutBlockDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateCutBlockDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateCutBlockDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof CreateCutBlockDto
   */
  geometry: object;
  /**
   *
   * @type {string}
   * @memberof CreateCutBlockDto
   */
  plannedDevelopmentDate: string;
  /**
   *
   * @type {number}
   * @memberof CreateCutBlockDto
   */
  plannedAreaHa: number;
  /**
   *
   * @type {number}
   * @memberof CreateCutBlockDto
   */
  submissionId: number;
}
/**
 *
 * @export
 * @interface CreateForestStewardshipPlanDto
 */
export interface CreateForestStewardshipPlanDto {
  /**
   *
   * @type {number}
   * @memberof CreateForestStewardshipPlanDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateForestStewardshipPlanDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateForestStewardshipPlanDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateForestStewardshipPlanDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateForestStewardshipPlanDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateForestStewardshipPlanDto
   */
  updateUser: string;
}
/**
 *
 * @export
 * @interface CreateFspDistrictXrefDto
 */
export interface CreateFspDistrictXrefDto {
  /**
   *
   * @type {number}
   * @memberof CreateFspDistrictXrefDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateFspDistrictXrefDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateFspDistrictXrefDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateFspDistrictXrefDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateFspDistrictXrefDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateFspDistrictXrefDto
   */
  updateUser: string;
}
/**
 *
 * @export
 * @interface CreateInteractionDto
 */
export interface CreateInteractionDto {
  /**
   *
   * @type {number}
   * @memberof CreateInteractionDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateInteractionDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  stakeholder: string;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  communicationDate: string;
  /**
   *
   * @type {string}
   * @memberof CreateInteractionDto
   */
  communicationDetails: string;
  /**
   *
   * @type {number}
   * @memberof CreateInteractionDto
   */
  projectId: number;
  /**
   *
   * @type {number}
   * @memberof CreateInteractionDto
   */
  attachmentId: number;
}
/**
 *
 * @export
 * @interface CreateProjectDto
 */
export interface CreateProjectDto {
  /**
   *
   * @type {number}
   * @memberof CreateProjectDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateProjectDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  commentingOpenDate: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  commentingClosedDate: string;
  /**
   *
   * @type {number}
   * @memberof CreateProjectDto
   */
  fspId: number;
  /**
   *
   * @type {number}
   * @memberof CreateProjectDto
   */
  districtId: number;
  /**
   *
   * @type {object}
   * @memberof CreateProjectDto
   */
  district: object;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  forestClientNumber: string;
  /**
   *
   * @type {object}
   * @memberof CreateProjectDto
   */
  forestClient: object;
  /**
   *
   * @type {string}
   * @memberof CreateProjectDto
   */
  workflowStateCode: string;
  /**
   *
   * @type {object}
   * @memberof CreateProjectDto
   */
  workflowState: object;
}
/**
 *
 * @export
 * @interface CreatePublicCommentDto
 */
export interface CreatePublicCommentDto {
  /**
   *
   * @type {number}
   * @memberof CreatePublicCommentDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreatePublicCommentDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  feedback: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  location: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  phoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  responseDetails: string;
  /**
   *
   * @type {number}
   * @memberof CreatePublicCommentDto
   */
  projectId: number;
  /**
   *
   * @type {object}
   * @memberof CreatePublicCommentDto
   */
  project: object;
  /**
   *
   * @type {string}
   * @memberof CreatePublicCommentDto
   */
  responseCode: string;
  /**
   *
   * @type {object}
   * @memberof CreatePublicCommentDto
   */
  response: object;
}
/**
 *
 * @export
 * @interface CreateRetentionAreaDto
 */
export interface CreateRetentionAreaDto {
  /**
   *
   * @type {number}
   * @memberof CreateRetentionAreaDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateRetentionAreaDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateRetentionAreaDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateRetentionAreaDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateRetentionAreaDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateRetentionAreaDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof CreateRetentionAreaDto
   */
  geometry: object;
  /**
   *
   * @type {number}
   * @memberof CreateRetentionAreaDto
   */
  plannedAreaHa: number;
  /**
   *
   * @type {number}
   * @memberof CreateRetentionAreaDto
   */
  submissionId: number;
}
/**
 *
 * @export
 * @interface CreateRoadSectionDto
 */
export interface CreateRoadSectionDto {
  /**
   *
   * @type {number}
   * @memberof CreateRoadSectionDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateRoadSectionDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateRoadSectionDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateRoadSectionDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateRoadSectionDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateRoadSectionDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof CreateRoadSectionDto
   */
  geometry: object;
  /**
   *
   * @type {string}
   * @memberof CreateRoadSectionDto
   */
  plannedDevelopmentDate: string;
  /**
   *
   * @type {number}
   * @memberof CreateRoadSectionDto
   */
  plannedLengthKm: number;
  /**
   *
   * @type {number}
   * @memberof CreateRoadSectionDto
   */
  submissionId: number;
}
/**
 *
 * @export
 * @interface CreateSubmissionDto
 */
export interface CreateSubmissionDto {
  /**
   *
   * @type {number}
   * @memberof CreateSubmissionDto
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof CreateSubmissionDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof CreateSubmissionDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateSubmissionDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof CreateSubmissionDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof CreateSubmissionDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof CreateSubmissionDto
   */
  geometry: object;
  /**
   *
   * @type {number}
   * @memberof CreateSubmissionDto
   */
  projectId: number;
  /**
   *
   * @type {object}
   * @memberof CreateSubmissionDto
   */
  project: object;
  /**
   *
   * @type {string}
   * @memberof CreateSubmissionDto
   */
  submissionTypeCode: string;
  /**
   *
   * @type {object}
   * @memberof CreateSubmissionDto
   */
  submissionType: object;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
  /**
   *
   * @type {number}
   * @memberof CreateUserDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CreateUserDto
   */
  username: string;
}
/**
 *
 * @export
 * @interface UpdateAttachmentDto
 */
export interface UpdateAttachmentDto {
  /**
   *
   * @type {number}
   * @memberof UpdateAttachmentDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  fileName: string;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  fileContents: string;
  /**
   *
   * @type {number}
   * @memberof UpdateAttachmentDto
   */
  projectId: number;
  /**
   *
   * @type {string}
   * @memberof UpdateAttachmentDto
   */
  attachmentTypeCode: string;
}
/**
 *
 * @export
 * @interface UpdateCutBlockDto
 */
export interface UpdateCutBlockDto {
  /**
   *
   * @type {number}
   * @memberof UpdateCutBlockDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateCutBlockDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateCutBlockDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateCutBlockDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateCutBlockDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof UpdateCutBlockDto
   */
  geometry: object;
  /**
   *
   * @type {string}
   * @memberof UpdateCutBlockDto
   */
  plannedDevelopmentDate: string;
  /**
   *
   * @type {number}
   * @memberof UpdateCutBlockDto
   */
  plannedAreaHa: number;
  /**
   *
   * @type {number}
   * @memberof UpdateCutBlockDto
   */
  submissionId: number;
}
/**
 *
 * @export
 * @interface UpdateForestStewardshipPlanDto
 */
export interface UpdateForestStewardshipPlanDto {
  /**
   *
   * @type {number}
   * @memberof UpdateForestStewardshipPlanDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateForestStewardshipPlanDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateForestStewardshipPlanDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateForestStewardshipPlanDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateForestStewardshipPlanDto
   */
  updateUser: string;
}
/**
 *
 * @export
 * @interface UpdateFspDistrictXrefDto
 */
export interface UpdateFspDistrictXrefDto {
  /**
   *
   * @type {number}
   * @memberof UpdateFspDistrictXrefDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateFspDistrictXrefDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateFspDistrictXrefDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateFspDistrictXrefDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateFspDistrictXrefDto
   */
  updateUser: string;
}
/**
 *
 * @export
 * @interface UpdateInteractionDto
 */
export interface UpdateInteractionDto {
  /**
   *
   * @type {number}
   * @memberof UpdateInteractionDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  stakeholder: string;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  communicationDate: string;
  /**
   *
   * @type {string}
   * @memberof UpdateInteractionDto
   */
  communicationDetails: string;
  /**
   *
   * @type {number}
   * @memberof UpdateInteractionDto
   */
  projectId: number;
  /**
   *
   * @type {number}
   * @memberof UpdateInteractionDto
   */
  attachmentId: number;
}
/**
 *
 * @export
 * @interface UpdateProjectDto
 */
export interface UpdateProjectDto {
  /**
   *
   * @type {number}
   * @memberof UpdateProjectDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  commentingOpenDate: string;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  commentingClosedDate: string;
  /**
   *
   * @type {number}
   * @memberof UpdateProjectDto
   */
  fspId: number;
  /**
   *
   * @type {number}
   * @memberof UpdateProjectDto
   */
  districtId: number;
  /**
   *
   * @type {object}
   * @memberof UpdateProjectDto
   */
  district: object;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  forestClientNumber: string;
  /**
   *
   * @type {object}
   * @memberof UpdateProjectDto
   */
  forestClient: object;
  /**
   *
   * @type {string}
   * @memberof UpdateProjectDto
   */
  workflowStateCode: string;
  /**
   *
   * @type {object}
   * @memberof UpdateProjectDto
   */
  workflowState: object;
}
/**
 *
 * @export
 * @interface UpdatePublicCommentDto
 */
export interface UpdatePublicCommentDto {
  /**
   *
   * @type {number}
   * @memberof UpdatePublicCommentDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  updateUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  feedback: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  location: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  phoneNumber: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  responseDetails: string;
  /**
   *
   * @type {number}
   * @memberof UpdatePublicCommentDto
   */
  projectId: number;
  /**
   *
   * @type {object}
   * @memberof UpdatePublicCommentDto
   */
  project: object;
  /**
   *
   * @type {string}
   * @memberof UpdatePublicCommentDto
   */
  responseCode: string;
  /**
   *
   * @type {object}
   * @memberof UpdatePublicCommentDto
   */
  response: object;
}
/**
 *
 * @export
 * @interface UpdateRetentionAreaDto
 */
export interface UpdateRetentionAreaDto {
  /**
   *
   * @type {number}
   * @memberof UpdateRetentionAreaDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateRetentionAreaDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRetentionAreaDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRetentionAreaDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRetentionAreaDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof UpdateRetentionAreaDto
   */
  geometry: object;
  /**
   *
   * @type {number}
   * @memberof UpdateRetentionAreaDto
   */
  plannedAreaHa: number;
  /**
   *
   * @type {number}
   * @memberof UpdateRetentionAreaDto
   */
  submissionId: number;
}
/**
 *
 * @export
 * @interface UpdateRoadSectionDto
 */
export interface UpdateRoadSectionDto {
  /**
   *
   * @type {number}
   * @memberof UpdateRoadSectionDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateRoadSectionDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRoadSectionDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRoadSectionDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateRoadSectionDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof UpdateRoadSectionDto
   */
  geometry: object;
  /**
   *
   * @type {string}
   * @memberof UpdateRoadSectionDto
   */
  plannedDevelopmentDate: string;
  /**
   *
   * @type {number}
   * @memberof UpdateRoadSectionDto
   */
  plannedLengthKm: number;
  /**
   *
   * @type {number}
   * @memberof UpdateRoadSectionDto
   */
  submissionId: number;
}
/**
 *
 * @export
 * @interface UpdateSubmissionDto
 */
export interface UpdateSubmissionDto {
  /**
   *
   * @type {number}
   * @memberof UpdateSubmissionDto
   */
  revisionCount: number;
  /**
   *
   * @type {string}
   * @memberof UpdateSubmissionDto
   */
  createTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateSubmissionDto
   */
  createUser: string;
  /**
   *
   * @type {string}
   * @memberof UpdateSubmissionDto
   */
  updateTimestamp: string;
  /**
   *
   * @type {string}
   * @memberof UpdateSubmissionDto
   */
  updateUser: string;
  /**
   *
   * @type {object}
   * @memberof UpdateSubmissionDto
   */
  geometry: object;
  /**
   *
   * @type {number}
   * @memberof UpdateSubmissionDto
   */
  projectId: number;
  /**
   *
   * @type {object}
   * @memberof UpdateSubmissionDto
   */
  project: object;
  /**
   *
   * @type {string}
   * @memberof UpdateSubmissionDto
   */
  submissionTypeCode: string;
  /**
   *
   * @type {object}
   * @memberof UpdateSubmissionDto
   */
  submissionType: object;
}
/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  username: string;
}

/**
 * AttachmentApi - axios parameter creator
 * @export
 */
export const AttachmentApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateAttachmentDto} createAttachmentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerCreate: async (
      createAttachmentDto: CreateAttachmentDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createAttachmentDto' is not null or undefined
      assertParamExists(
        'attachmentControllerCreate',
        'createAttachmentDto',
        createAttachmentDto
      );
      const localVarPath = `/api/attachment`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAttachmentDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentControllerFindOne', 'id', id);
      const localVarPath = `/api/attachment/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentControllerRemove', 'id', id);
      const localVarPath = `/api/attachment/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateAttachmentDto} updateAttachmentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerUpdate: async (
      id: number,
      updateAttachmentDto: UpdateAttachmentDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentControllerUpdate', 'id', id);
      // verify required parameter 'updateAttachmentDto' is not null or undefined
      assertParamExists(
        'attachmentControllerUpdate',
        'updateAttachmentDto',
        updateAttachmentDto
      );
      const localVarPath = `/api/attachment/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAttachmentDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AttachmentApi - functional programming interface
 * @export
 */
export const AttachmentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AttachmentApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateAttachmentDto} createAttachmentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentControllerCreate(
      createAttachmentDto: CreateAttachmentDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentControllerCreate(
        createAttachmentDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateAttachmentDto} updateAttachmentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentControllerUpdate(
      id: number,
      updateAttachmentDto: UpdateAttachmentDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentControllerUpdate(
        id,
        updateAttachmentDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AttachmentApi - factory interface
 * @export
 */
export const AttachmentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AttachmentApiFp(configuration);
  return {
    /**
     *
     * @param {CreateAttachmentDto} createAttachmentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerCreate(
      createAttachmentDto: CreateAttachmentDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .attachmentControllerCreate(createAttachmentDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerFindOne(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .attachmentControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerRemove(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .attachmentControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateAttachmentDto} updateAttachmentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentControllerUpdate(
      id: number,
      updateAttachmentDto: UpdateAttachmentDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .attachmentControllerUpdate(id, updateAttachmentDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AttachmentApi - object-oriented interface
 * @export
 * @class AttachmentApi
 * @extends {BaseAPI}
 */
export class AttachmentApi extends BaseAPI {
  /**
   *
   * @param {CreateAttachmentDto} createAttachmentDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentApi
   */
  public attachmentControllerCreate(
    createAttachmentDto: CreateAttachmentDto,
    options?: any
  ) {
    return AttachmentApiFp(this.configuration)
      .attachmentControllerCreate(createAttachmentDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentApi
   */
  public attachmentControllerFindOne(id: number, options?: any) {
    return AttachmentApiFp(this.configuration)
      .attachmentControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentApi
   */
  public attachmentControllerRemove(id: number, options?: any) {
    return AttachmentApiFp(this.configuration)
      .attachmentControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateAttachmentDto} updateAttachmentDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentApi
   */
  public attachmentControllerUpdate(
    id: number,
    updateAttachmentDto: UpdateAttachmentDto,
    options?: any
  ) {
    return AttachmentApiFp(this.configuration)
      .attachmentControllerUpdate(id, updateAttachmentDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AttachmentTypeCodeApi - axios parameter creator
 * @export
 */
export const AttachmentTypeCodeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentTypeCodeControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/attachment-type-code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentTypeCodeControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('attachmentTypeCodeControllerFindOne', 'id', id);
      const localVarPath = `/api/attachment-type-code/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AttachmentTypeCodeApi - functional programming interface
 * @export
 */
export const AttachmentTypeCodeApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator = AttachmentTypeCodeApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentTypeCodeControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentTypeCodeControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentTypeCodeControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentTypeCodeControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AttachmentTypeCodeApi - factory interface
 * @export
 */
export const AttachmentTypeCodeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AttachmentTypeCodeApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentTypeCodeControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .attachmentTypeCodeControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentTypeCodeControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .attachmentTypeCodeControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AttachmentTypeCodeApi - object-oriented interface
 * @export
 * @class AttachmentTypeCodeApi
 * @extends {BaseAPI}
 */
export class AttachmentTypeCodeApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentTypeCodeApi
   */
  public attachmentTypeCodeControllerFindAll(options?: any) {
    return AttachmentTypeCodeApiFp(this.configuration)
      .attachmentTypeCodeControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentTypeCodeApi
   */
  public attachmentTypeCodeControllerFindOne(id: number, options?: any) {
    return AttachmentTypeCodeApiFp(this.configuration)
      .attachmentTypeCodeControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
export const AttachmentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/attachments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AttachmentsApi - functional programming interface
 * @export
 */
export const AttachmentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AttachmentsApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachmentsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AttachmentsApi - factory interface
 * @export
 */
export const AttachmentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AttachmentsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachmentsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .attachmentsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AttachmentsApi - object-oriented interface
 * @export
 * @class AttachmentsApi
 * @extends {BaseAPI}
 */
export class AttachmentsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AttachmentsApi
   */
  public attachmentsControllerFindAll(options?: any) {
    return AttachmentsApiFp(this.configuration)
      .attachmentsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CutBlockApi - axios parameter creator
 * @export
 */
export const CutBlockApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateCutBlockDto} createCutBlockDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerCreate: async (
      createCutBlockDto: CreateCutBlockDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCutBlockDto' is not null or undefined
      assertParamExists(
        'cutBlockControllerCreate',
        'createCutBlockDto',
        createCutBlockDto
      );
      const localVarPath = `/api/cut-block`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCutBlockDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cutBlockControllerFindOne', 'id', id);
      const localVarPath = `/api/cut-block/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cutBlockControllerRemove', 'id', id);
      const localVarPath = `/api/cut-block/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateCutBlockDto} updateCutBlockDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerUpdate: async (
      id: number,
      updateCutBlockDto: UpdateCutBlockDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cutBlockControllerUpdate', 'id', id);
      // verify required parameter 'updateCutBlockDto' is not null or undefined
      assertParamExists(
        'cutBlockControllerUpdate',
        'updateCutBlockDto',
        updateCutBlockDto
      );
      const localVarPath = `/api/cut-block/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCutBlockDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CutBlockApi - functional programming interface
 * @export
 */
export const CutBlockApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CutBlockApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateCutBlockDto} createCutBlockDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cutBlockControllerCreate(
      createCutBlockDto: CreateCutBlockDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cutBlockControllerCreate(
        createCutBlockDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cutBlockControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cutBlockControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cutBlockControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cutBlockControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateCutBlockDto} updateCutBlockDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cutBlockControllerUpdate(
      id: number,
      updateCutBlockDto: UpdateCutBlockDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cutBlockControllerUpdate(
        id,
        updateCutBlockDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CutBlockApi - factory interface
 * @export
 */
export const CutBlockApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CutBlockApiFp(configuration);
  return {
    /**
     *
     * @param {CreateCutBlockDto} createCutBlockDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerCreate(
      createCutBlockDto: CreateCutBlockDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .cutBlockControllerCreate(createCutBlockDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerFindOne(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .cutBlockControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerRemove(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .cutBlockControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateCutBlockDto} updateCutBlockDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlockControllerUpdate(
      id: number,
      updateCutBlockDto: UpdateCutBlockDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .cutBlockControllerUpdate(id, updateCutBlockDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CutBlockApi - object-oriented interface
 * @export
 * @class CutBlockApi
 * @extends {BaseAPI}
 */
export class CutBlockApi extends BaseAPI {
  /**
   *
   * @param {CreateCutBlockDto} createCutBlockDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CutBlockApi
   */
  public cutBlockControllerCreate(
    createCutBlockDto: CreateCutBlockDto,
    options?: any
  ) {
    return CutBlockApiFp(this.configuration)
      .cutBlockControllerCreate(createCutBlockDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CutBlockApi
   */
  public cutBlockControllerFindOne(id: number, options?: any) {
    return CutBlockApiFp(this.configuration)
      .cutBlockControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CutBlockApi
   */
  public cutBlockControllerRemove(id: number, options?: any) {
    return CutBlockApiFp(this.configuration)
      .cutBlockControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateCutBlockDto} updateCutBlockDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CutBlockApi
   */
  public cutBlockControllerUpdate(
    id: number,
    updateCutBlockDto: UpdateCutBlockDto,
    options?: any
  ) {
    return CutBlockApiFp(this.configuration)
      .cutBlockControllerUpdate(id, updateCutBlockDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CutBlocksApi - axios parameter creator
 * @export
 */
export const CutBlocksApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlocksControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/cut-blocks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CutBlocksApi - functional programming interface
 * @export
 */
export const CutBlocksApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CutBlocksApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cutBlocksControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cutBlocksControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CutBlocksApi - factory interface
 * @export
 */
export const CutBlocksApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CutBlocksApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cutBlocksControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .cutBlocksControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CutBlocksApi - object-oriented interface
 * @export
 * @class CutBlocksApi
 * @extends {BaseAPI}
 */
export class CutBlocksApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CutBlocksApi
   */
  public cutBlocksControllerFindAll(options?: any) {
    return CutBlocksApiFp(this.configuration)
      .cutBlocksControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetData: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/default`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetData(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetData(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetData(options?: any): AxiosPromise<void> {
      return localVarFp
        .appControllerGetData(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public appControllerGetData(options?: any) {
    return DefaultApiFp(this.configuration)
      .appControllerGetData(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DistrictApi - axios parameter creator
 * @export
 */
export const DistrictApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    districtControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/district`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    districtControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('districtControllerFindOne', 'id', id);
      const localVarPath = `/api/district/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DistrictApi - functional programming interface
 * @export
 */
export const DistrictApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DistrictApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async districtControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.districtControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async districtControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.districtControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DistrictApi - factory interface
 * @export
 */
export const DistrictApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DistrictApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    districtControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .districtControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    districtControllerFindOne(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .districtControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DistrictApi - object-oriented interface
 * @export
 * @class DistrictApi
 * @extends {BaseAPI}
 */
export class DistrictApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DistrictApi
   */
  public districtControllerFindAll(options?: any) {
    return DistrictApiFp(this.configuration)
      .districtControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DistrictApi
   */
  public districtControllerFindOne(id: number, options?: any) {
    return DistrictApiFp(this.configuration)
      .districtControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ForestClientApi - axios parameter creator
 * @export
 */
export const ForestClientApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestClientControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/forest-client`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestClientControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('forestClientControllerFindOne', 'id', id);
      const localVarPath = `/api/forest-client/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ForestClientApi - functional programming interface
 * @export
 */
export const ForestClientApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ForestClientApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestClientControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestClientControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestClientControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestClientControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ForestClientApi - factory interface
 * @export
 */
export const ForestClientApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ForestClientApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestClientControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .forestClientControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestClientControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .forestClientControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ForestClientApi - object-oriented interface
 * @export
 * @class ForestClientApi
 * @extends {BaseAPI}
 */
export class ForestClientApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestClientApi
   */
  public forestClientControllerFindAll(options?: any) {
    return ForestClientApiFp(this.configuration)
      .forestClientControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestClientApi
   */
  public forestClientControllerFindOne(id: number, options?: any) {
    return ForestClientApiFp(this.configuration)
      .forestClientControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ForestStewardshipPlanApi - axios parameter creator
 * @export
 */
export const ForestStewardshipPlanApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateForestStewardshipPlanDto} createForestStewardshipPlanDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerCreate: async (
      createForestStewardshipPlanDto: CreateForestStewardshipPlanDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createForestStewardshipPlanDto' is not null or undefined
      assertParamExists(
        'forestStewardshipPlanControllerCreate',
        'createForestStewardshipPlanDto',
        createForestStewardshipPlanDto
      );
      const localVarPath = `/api/forest-stewardship-plan`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createForestStewardshipPlanDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('forestStewardshipPlanControllerFindOne', 'id', id);
      const localVarPath = `/api/forest-stewardship-plan/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('forestStewardshipPlanControllerRemove', 'id', id);
      const localVarPath = `/api/forest-stewardship-plan/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateForestStewardshipPlanDto} updateForestStewardshipPlanDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerUpdate: async (
      id: number,
      updateForestStewardshipPlanDto: UpdateForestStewardshipPlanDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('forestStewardshipPlanControllerUpdate', 'id', id);
      // verify required parameter 'updateForestStewardshipPlanDto' is not null or undefined
      assertParamExists(
        'forestStewardshipPlanControllerUpdate',
        'updateForestStewardshipPlanDto',
        updateForestStewardshipPlanDto
      );
      const localVarPath = `/api/forest-stewardship-plan/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateForestStewardshipPlanDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ForestStewardshipPlanApi - functional programming interface
 * @export
 */
export const ForestStewardshipPlanApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator = ForestStewardshipPlanApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateForestStewardshipPlanDto} createForestStewardshipPlanDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestStewardshipPlanControllerCreate(
      createForestStewardshipPlanDto: CreateForestStewardshipPlanDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestStewardshipPlanControllerCreate(
        createForestStewardshipPlanDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestStewardshipPlanControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestStewardshipPlanControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestStewardshipPlanControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestStewardshipPlanControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateForestStewardshipPlanDto} updateForestStewardshipPlanDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestStewardshipPlanControllerUpdate(
      id: number,
      updateForestStewardshipPlanDto: UpdateForestStewardshipPlanDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestStewardshipPlanControllerUpdate(
        id,
        updateForestStewardshipPlanDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ForestStewardshipPlanApi - factory interface
 * @export
 */
export const ForestStewardshipPlanApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ForestStewardshipPlanApiFp(configuration);
  return {
    /**
     *
     * @param {CreateForestStewardshipPlanDto} createForestStewardshipPlanDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerCreate(
      createForestStewardshipPlanDto: CreateForestStewardshipPlanDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .forestStewardshipPlanControllerCreate(
          createForestStewardshipPlanDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .forestStewardshipPlanControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerRemove(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .forestStewardshipPlanControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateForestStewardshipPlanDto} updateForestStewardshipPlanDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlanControllerUpdate(
      id: number,
      updateForestStewardshipPlanDto: UpdateForestStewardshipPlanDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .forestStewardshipPlanControllerUpdate(
          id,
          updateForestStewardshipPlanDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ForestStewardshipPlanApi - object-oriented interface
 * @export
 * @class ForestStewardshipPlanApi
 * @extends {BaseAPI}
 */
export class ForestStewardshipPlanApi extends BaseAPI {
  /**
   *
   * @param {CreateForestStewardshipPlanDto} createForestStewardshipPlanDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestStewardshipPlanApi
   */
  public forestStewardshipPlanControllerCreate(
    createForestStewardshipPlanDto: CreateForestStewardshipPlanDto,
    options?: any
  ) {
    return ForestStewardshipPlanApiFp(this.configuration)
      .forestStewardshipPlanControllerCreate(
        createForestStewardshipPlanDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestStewardshipPlanApi
   */
  public forestStewardshipPlanControllerFindOne(id: number, options?: any) {
    return ForestStewardshipPlanApiFp(this.configuration)
      .forestStewardshipPlanControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestStewardshipPlanApi
   */
  public forestStewardshipPlanControllerRemove(id: number, options?: any) {
    return ForestStewardshipPlanApiFp(this.configuration)
      .forestStewardshipPlanControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateForestStewardshipPlanDto} updateForestStewardshipPlanDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestStewardshipPlanApi
   */
  public forestStewardshipPlanControllerUpdate(
    id: number,
    updateForestStewardshipPlanDto: UpdateForestStewardshipPlanDto,
    options?: any
  ) {
    return ForestStewardshipPlanApiFp(this.configuration)
      .forestStewardshipPlanControllerUpdate(
        id,
        updateForestStewardshipPlanDto,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ForestStewardshipPlansApi - axios parameter creator
 * @export
 */
export const ForestStewardshipPlansApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlansControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/forest-stewardship-plans`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ForestStewardshipPlansApi - functional programming interface
 * @export
 */
export const ForestStewardshipPlansApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator = ForestStewardshipPlansApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forestStewardshipPlansControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forestStewardshipPlansControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ForestStewardshipPlansApi - factory interface
 * @export
 */
export const ForestStewardshipPlansApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ForestStewardshipPlansApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forestStewardshipPlansControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .forestStewardshipPlansControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ForestStewardshipPlansApi - object-oriented interface
 * @export
 * @class ForestStewardshipPlansApi
 * @extends {BaseAPI}
 */
export class ForestStewardshipPlansApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ForestStewardshipPlansApi
   */
  public forestStewardshipPlansControllerFindAll(options?: any) {
    return ForestStewardshipPlansApiFp(this.configuration)
      .forestStewardshipPlansControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FspDistrictXrefApi - axios parameter creator
 * @export
 */
export const FspDistrictXrefApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateFspDistrictXrefDto} createFspDistrictXrefDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerCreate: async (
      createFspDistrictXrefDto: CreateFspDistrictXrefDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createFspDistrictXrefDto' is not null or undefined
      assertParamExists(
        'fspDistrictXrefControllerCreate',
        'createFspDistrictXrefDto',
        createFspDistrictXrefDto
      );
      const localVarPath = `/api/fsp-district-xref`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createFspDistrictXrefDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('fspDistrictXrefControllerFindOne', 'id', id);
      const localVarPath = `/api/fsp-district-xref/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('fspDistrictXrefControllerRemove', 'id', id);
      const localVarPath = `/api/fsp-district-xref/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateFspDistrictXrefDto} updateFspDistrictXrefDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerUpdate: async (
      id: number,
      updateFspDistrictXrefDto: UpdateFspDistrictXrefDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('fspDistrictXrefControllerUpdate', 'id', id);
      // verify required parameter 'updateFspDistrictXrefDto' is not null or undefined
      assertParamExists(
        'fspDistrictXrefControllerUpdate',
        'updateFspDistrictXrefDto',
        updateFspDistrictXrefDto
      );
      const localVarPath = `/api/fsp-district-xref/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFspDistrictXrefDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FspDistrictXrefApi - functional programming interface
 * @export
 */
export const FspDistrictXrefApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FspDistrictXrefApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateFspDistrictXrefDto} createFspDistrictXrefDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fspDistrictXrefControllerCreate(
      createFspDistrictXrefDto: CreateFspDistrictXrefDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fspDistrictXrefControllerCreate(
        createFspDistrictXrefDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fspDistrictXrefControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fspDistrictXrefControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fspDistrictXrefControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fspDistrictXrefControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateFspDistrictXrefDto} updateFspDistrictXrefDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fspDistrictXrefControllerUpdate(
      id: number,
      updateFspDistrictXrefDto: UpdateFspDistrictXrefDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fspDistrictXrefControllerUpdate(
        id,
        updateFspDistrictXrefDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FspDistrictXrefApi - factory interface
 * @export
 */
export const FspDistrictXrefApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FspDistrictXrefApiFp(configuration);
  return {
    /**
     *
     * @param {CreateFspDistrictXrefDto} createFspDistrictXrefDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerCreate(
      createFspDistrictXrefDto: CreateFspDistrictXrefDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .fspDistrictXrefControllerCreate(createFspDistrictXrefDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .fspDistrictXrefControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerRemove(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .fspDistrictXrefControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateFspDistrictXrefDto} updateFspDistrictXrefDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefControllerUpdate(
      id: number,
      updateFspDistrictXrefDto: UpdateFspDistrictXrefDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .fspDistrictXrefControllerUpdate(id, updateFspDistrictXrefDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FspDistrictXrefApi - object-oriented interface
 * @export
 * @class FspDistrictXrefApi
 * @extends {BaseAPI}
 */
export class FspDistrictXrefApi extends BaseAPI {
  /**
   *
   * @param {CreateFspDistrictXrefDto} createFspDistrictXrefDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FspDistrictXrefApi
   */
  public fspDistrictXrefControllerCreate(
    createFspDistrictXrefDto: CreateFspDistrictXrefDto,
    options?: any
  ) {
    return FspDistrictXrefApiFp(this.configuration)
      .fspDistrictXrefControllerCreate(createFspDistrictXrefDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FspDistrictXrefApi
   */
  public fspDistrictXrefControllerFindOne(id: number, options?: any) {
    return FspDistrictXrefApiFp(this.configuration)
      .fspDistrictXrefControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FspDistrictXrefApi
   */
  public fspDistrictXrefControllerRemove(id: number, options?: any) {
    return FspDistrictXrefApiFp(this.configuration)
      .fspDistrictXrefControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateFspDistrictXrefDto} updateFspDistrictXrefDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FspDistrictXrefApi
   */
  public fspDistrictXrefControllerUpdate(
    id: number,
    updateFspDistrictXrefDto: UpdateFspDistrictXrefDto,
    options?: any
  ) {
    return FspDistrictXrefApiFp(this.configuration)
      .fspDistrictXrefControllerUpdate(id, updateFspDistrictXrefDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FspDistrictXrefsApi - axios parameter creator
 * @export
 */
export const FspDistrictXrefsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/fsp-district-xrefs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FspDistrictXrefsApi - functional programming interface
 * @export
 */
export const FspDistrictXrefsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FspDistrictXrefsApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fspDistrictXrefsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fspDistrictXrefsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FspDistrictXrefsApi - factory interface
 * @export
 */
export const FspDistrictXrefsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FspDistrictXrefsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fspDistrictXrefsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .fspDistrictXrefsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FspDistrictXrefsApi - object-oriented interface
 * @export
 * @class FspDistrictXrefsApi
 * @extends {BaseAPI}
 */
export class FspDistrictXrefsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FspDistrictXrefsApi
   */
  public fspDistrictXrefsControllerFindAll(options?: any) {
    return FspDistrictXrefsApiFp(this.configuration)
      .fspDistrictXrefsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * InteractionApi - axios parameter creator
 * @export
 */
export const InteractionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateInteractionDto} createInteractionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerCreate: async (
      createInteractionDto: CreateInteractionDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createInteractionDto' is not null or undefined
      assertParamExists(
        'interactionControllerCreate',
        'createInteractionDto',
        createInteractionDto
      );
      const localVarPath = `/api/interaction`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createInteractionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('interactionControllerFindOne', 'id', id);
      const localVarPath = `/api/interaction/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('interactionControllerRemove', 'id', id);
      const localVarPath = `/api/interaction/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateInteractionDto} updateInteractionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerUpdate: async (
      id: number,
      updateInteractionDto: UpdateInteractionDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('interactionControllerUpdate', 'id', id);
      // verify required parameter 'updateInteractionDto' is not null or undefined
      assertParamExists(
        'interactionControllerUpdate',
        'updateInteractionDto',
        updateInteractionDto
      );
      const localVarPath = `/api/interaction/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateInteractionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InteractionApi - functional programming interface
 * @export
 */
export const InteractionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InteractionApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateInteractionDto} createInteractionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async interactionControllerCreate(
      createInteractionDto: CreateInteractionDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.interactionControllerCreate(
        createInteractionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async interactionControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.interactionControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async interactionControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.interactionControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateInteractionDto} updateInteractionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async interactionControllerUpdate(
      id: number,
      updateInteractionDto: UpdateInteractionDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.interactionControllerUpdate(
        id,
        updateInteractionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InteractionApi - factory interface
 * @export
 */
export const InteractionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InteractionApiFp(configuration);
  return {
    /**
     *
     * @param {CreateInteractionDto} createInteractionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerCreate(
      createInteractionDto: CreateInteractionDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .interactionControllerCreate(createInteractionDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .interactionControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerRemove(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .interactionControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateInteractionDto} updateInteractionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionControllerUpdate(
      id: number,
      updateInteractionDto: UpdateInteractionDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .interactionControllerUpdate(id, updateInteractionDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InteractionApi - object-oriented interface
 * @export
 * @class InteractionApi
 * @extends {BaseAPI}
 */
export class InteractionApi extends BaseAPI {
  /**
   *
   * @param {CreateInteractionDto} createInteractionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InteractionApi
   */
  public interactionControllerCreate(
    createInteractionDto: CreateInteractionDto,
    options?: any
  ) {
    return InteractionApiFp(this.configuration)
      .interactionControllerCreate(createInteractionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InteractionApi
   */
  public interactionControllerFindOne(id: number, options?: any) {
    return InteractionApiFp(this.configuration)
      .interactionControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InteractionApi
   */
  public interactionControllerRemove(id: number, options?: any) {
    return InteractionApiFp(this.configuration)
      .interactionControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateInteractionDto} updateInteractionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InteractionApi
   */
  public interactionControllerUpdate(
    id: number,
    updateInteractionDto: UpdateInteractionDto,
    options?: any
  ) {
    return InteractionApiFp(this.configuration)
      .interactionControllerUpdate(id, updateInteractionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * InteractionsApi - axios parameter creator
 * @export
 */
export const InteractionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/interactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * InteractionsApi - functional programming interface
 * @export
 */
export const InteractionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = InteractionsApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async interactionsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.interactionsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * InteractionsApi - factory interface
 * @export
 */
export const InteractionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = InteractionsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    interactionsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .interactionsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * InteractionsApi - object-oriented interface
 * @export
 * @class InteractionsApi
 * @extends {BaseAPI}
 */
export class InteractionsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof InteractionsApi
   */
  public interactionsControllerFindAll(options?: any) {
    return InteractionsApiFp(this.configuration)
      .interactionsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateProjectDto} createProjectDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerCreate: async (
      createProjectDto: CreateProjectDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createProjectDto' is not null or undefined
      assertParamExists(
        'projectControllerCreate',
        'createProjectDto',
        createProjectDto
      );
      const localVarPath = `/api/project`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProjectDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('projectControllerFindOne', 'id', id);
      const localVarPath = `/api/project/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('projectControllerRemove', 'id', id);
      const localVarPath = `/api/project/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateProjectDto} updateProjectDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerUpdate: async (
      id: number,
      updateProjectDto: UpdateProjectDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('projectControllerUpdate', 'id', id);
      // verify required parameter 'updateProjectDto' is not null or undefined
      assertParamExists(
        'projectControllerUpdate',
        'updateProjectDto',
        updateProjectDto
      );
      const localVarPath = `/api/project/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateProjectDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateProjectDto} createProjectDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectControllerCreate(
      createProjectDto: CreateProjectDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerCreate(
        createProjectDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateProjectDto} updateProjectDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectControllerUpdate(
      id: number,
      updateProjectDto: UpdateProjectDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUpdate(
        id,
        updateProjectDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProjectApiFp(configuration);
  return {
    /**
     *
     * @param {CreateProjectDto} createProjectDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerCreate(
      createProjectDto: CreateProjectDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .projectControllerCreate(createProjectDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerFindOne(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .projectControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerRemove(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .projectControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateProjectDto} updateProjectDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectControllerUpdate(
      id: number,
      updateProjectDto: UpdateProjectDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .projectControllerUpdate(id, updateProjectDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
  /**
   *
   * @param {CreateProjectDto} createProjectDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public projectControllerCreate(
    createProjectDto: CreateProjectDto,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .projectControllerCreate(createProjectDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public projectControllerFindOne(id: number, options?: any) {
    return ProjectApiFp(this.configuration)
      .projectControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public projectControllerRemove(id: number, options?: any) {
    return ProjectApiFp(this.configuration)
      .projectControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateProjectDto} updateProjectDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public projectControllerUpdate(
    id: number,
    updateProjectDto: UpdateProjectDto,
    options?: any
  ) {
    return ProjectApiFp(this.configuration)
      .projectControllerUpdate(id, updateProjectDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerFindByFspId: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('projectsControllerFindByFspId', 'id', id);
      const localVarPath = `/api/projects/byFspId/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerFindByFspId(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.projectsControllerFindByFspId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProjectsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .projectsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerFindByFspId(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .projectsControllerFindByFspId(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public projectsControllerFindAll(options?: any) {
    return ProjectsApiFp(this.configuration)
      .projectsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public projectsControllerFindByFspId(id: number, options?: any) {
    return ProjectsApiFp(this.configuration)
      .projectsControllerFindByFspId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicCommentApi - axios parameter creator
 * @export
 */
export const PublicCommentApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreatePublicCommentDto} createPublicCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerCreate: async (
      createPublicCommentDto: CreatePublicCommentDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPublicCommentDto' is not null or undefined
      assertParamExists(
        'publicCommentControllerCreate',
        'createPublicCommentDto',
        createPublicCommentDto
      );
      const localVarPath = `/api/public-comment`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPublicCommentDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('publicCommentControllerFindOne', 'id', id);
      const localVarPath = `/api/public-comment/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('publicCommentControllerRemove', 'id', id);
      const localVarPath = `/api/public-comment/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdatePublicCommentDto} updatePublicCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerUpdate: async (
      id: number,
      updatePublicCommentDto: UpdatePublicCommentDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('publicCommentControllerUpdate', 'id', id);
      // verify required parameter 'updatePublicCommentDto' is not null or undefined
      assertParamExists(
        'publicCommentControllerUpdate',
        'updatePublicCommentDto',
        updatePublicCommentDto
      );
      const localVarPath = `/api/public-comment/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePublicCommentDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicCommentApi - functional programming interface
 * @export
 */
export const PublicCommentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PublicCommentApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreatePublicCommentDto} createPublicCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicCommentControllerCreate(
      createPublicCommentDto: CreatePublicCommentDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicCommentControllerCreate(
        createPublicCommentDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicCommentControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicCommentControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicCommentControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicCommentControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdatePublicCommentDto} updatePublicCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicCommentControllerUpdate(
      id: number,
      updatePublicCommentDto: UpdatePublicCommentDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicCommentControllerUpdate(
        id,
        updatePublicCommentDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PublicCommentApi - factory interface
 * @export
 */
export const PublicCommentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PublicCommentApiFp(configuration);
  return {
    /**
     *
     * @param {CreatePublicCommentDto} createPublicCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerCreate(
      createPublicCommentDto: CreatePublicCommentDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .publicCommentControllerCreate(createPublicCommentDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .publicCommentControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerRemove(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .publicCommentControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdatePublicCommentDto} updatePublicCommentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentControllerUpdate(
      id: number,
      updatePublicCommentDto: UpdatePublicCommentDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .publicCommentControllerUpdate(id, updatePublicCommentDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicCommentApi - object-oriented interface
 * @export
 * @class PublicCommentApi
 * @extends {BaseAPI}
 */
export class PublicCommentApi extends BaseAPI {
  /**
   *
   * @param {CreatePublicCommentDto} createPublicCommentDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicCommentApi
   */
  public publicCommentControllerCreate(
    createPublicCommentDto: CreatePublicCommentDto,
    options?: any
  ) {
    return PublicCommentApiFp(this.configuration)
      .publicCommentControllerCreate(createPublicCommentDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicCommentApi
   */
  public publicCommentControllerFindOne(id: number, options?: any) {
    return PublicCommentApiFp(this.configuration)
      .publicCommentControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicCommentApi
   */
  public publicCommentControllerRemove(id: number, options?: any) {
    return PublicCommentApiFp(this.configuration)
      .publicCommentControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdatePublicCommentDto} updatePublicCommentDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicCommentApi
   */
  public publicCommentControllerUpdate(
    id: number,
    updatePublicCommentDto: UpdatePublicCommentDto,
    options?: any
  ) {
    return PublicCommentApiFp(this.configuration)
      .publicCommentControllerUpdate(id, updatePublicCommentDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicCommentsApi - axios parameter creator
 * @export
 */
export const PublicCommentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/public-comments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentsControllerFindByProjectId: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('publicCommentsControllerFindByProjectId', 'id', id);
      const localVarPath = `/api/public-comments/byProjectId/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicCommentsApi - functional programming interface
 * @export
 */
export const PublicCommentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PublicCommentsApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicCommentsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicCommentsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async publicCommentsControllerFindByProjectId(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publicCommentsControllerFindByProjectId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PublicCommentsApi - factory interface
 * @export
 */
export const PublicCommentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PublicCommentsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .publicCommentsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicCommentsControllerFindByProjectId(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .publicCommentsControllerFindByProjectId(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicCommentsApi - object-oriented interface
 * @export
 * @class PublicCommentsApi
 * @extends {BaseAPI}
 */
export class PublicCommentsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicCommentsApi
   */
  public publicCommentsControllerFindAll(options?: any) {
    return PublicCommentsApiFp(this.configuration)
      .publicCommentsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicCommentsApi
   */
  public publicCommentsControllerFindByProjectId(id: number, options?: any) {
    return PublicCommentsApiFp(this.configuration)
      .publicCommentsControllerFindByProjectId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ResponseCodeApi - axios parameter creator
 * @export
 */
export const ResponseCodeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    responseCodeControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/response-code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    responseCodeControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('responseCodeControllerFindOne', 'id', id);
      const localVarPath = `/api/response-code/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ResponseCodeApi - functional programming interface
 * @export
 */
export const ResponseCodeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ResponseCodeApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async responseCodeControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.responseCodeControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async responseCodeControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.responseCodeControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ResponseCodeApi - factory interface
 * @export
 */
export const ResponseCodeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ResponseCodeApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    responseCodeControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .responseCodeControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    responseCodeControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .responseCodeControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ResponseCodeApi - object-oriented interface
 * @export
 * @class ResponseCodeApi
 * @extends {BaseAPI}
 */
export class ResponseCodeApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResponseCodeApi
   */
  public responseCodeControllerFindAll(options?: any) {
    return ResponseCodeApiFp(this.configuration)
      .responseCodeControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ResponseCodeApi
   */
  public responseCodeControllerFindOne(id: number, options?: any) {
    return ResponseCodeApiFp(this.configuration)
      .responseCodeControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RetentionAreaApi - axios parameter creator
 * @export
 */
export const RetentionAreaApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateRetentionAreaDto} createRetentionAreaDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerCreate: async (
      createRetentionAreaDto: CreateRetentionAreaDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createRetentionAreaDto' is not null or undefined
      assertParamExists(
        'retentionAreaControllerCreate',
        'createRetentionAreaDto',
        createRetentionAreaDto
      );
      const localVarPath = `/api/retention-area`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRetentionAreaDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('retentionAreaControllerFindOne', 'id', id);
      const localVarPath = `/api/retention-area/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('retentionAreaControllerRemove', 'id', id);
      const localVarPath = `/api/retention-area/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateRetentionAreaDto} updateRetentionAreaDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerUpdate: async (
      id: number,
      updateRetentionAreaDto: UpdateRetentionAreaDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('retentionAreaControllerUpdate', 'id', id);
      // verify required parameter 'updateRetentionAreaDto' is not null or undefined
      assertParamExists(
        'retentionAreaControllerUpdate',
        'updateRetentionAreaDto',
        updateRetentionAreaDto
      );
      const localVarPath = `/api/retention-area/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRetentionAreaDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RetentionAreaApi - functional programming interface
 * @export
 */
export const RetentionAreaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RetentionAreaApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateRetentionAreaDto} createRetentionAreaDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retentionAreaControllerCreate(
      createRetentionAreaDto: CreateRetentionAreaDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retentionAreaControllerCreate(
        createRetentionAreaDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retentionAreaControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retentionAreaControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retentionAreaControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retentionAreaControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateRetentionAreaDto} updateRetentionAreaDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retentionAreaControllerUpdate(
      id: number,
      updateRetentionAreaDto: UpdateRetentionAreaDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retentionAreaControllerUpdate(
        id,
        updateRetentionAreaDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RetentionAreaApi - factory interface
 * @export
 */
export const RetentionAreaApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RetentionAreaApiFp(configuration);
  return {
    /**
     *
     * @param {CreateRetentionAreaDto} createRetentionAreaDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerCreate(
      createRetentionAreaDto: CreateRetentionAreaDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .retentionAreaControllerCreate(createRetentionAreaDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .retentionAreaControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerRemove(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .retentionAreaControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateRetentionAreaDto} updateRetentionAreaDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreaControllerUpdate(
      id: number,
      updateRetentionAreaDto: UpdateRetentionAreaDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .retentionAreaControllerUpdate(id, updateRetentionAreaDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RetentionAreaApi - object-oriented interface
 * @export
 * @class RetentionAreaApi
 * @extends {BaseAPI}
 */
export class RetentionAreaApi extends BaseAPI {
  /**
   *
   * @param {CreateRetentionAreaDto} createRetentionAreaDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RetentionAreaApi
   */
  public retentionAreaControllerCreate(
    createRetentionAreaDto: CreateRetentionAreaDto,
    options?: any
  ) {
    return RetentionAreaApiFp(this.configuration)
      .retentionAreaControllerCreate(createRetentionAreaDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RetentionAreaApi
   */
  public retentionAreaControllerFindOne(id: number, options?: any) {
    return RetentionAreaApiFp(this.configuration)
      .retentionAreaControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RetentionAreaApi
   */
  public retentionAreaControllerRemove(id: number, options?: any) {
    return RetentionAreaApiFp(this.configuration)
      .retentionAreaControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateRetentionAreaDto} updateRetentionAreaDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RetentionAreaApi
   */
  public retentionAreaControllerUpdate(
    id: number,
    updateRetentionAreaDto: UpdateRetentionAreaDto,
    options?: any
  ) {
    return RetentionAreaApiFp(this.configuration)
      .retentionAreaControllerUpdate(id, updateRetentionAreaDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RetentionAreasApi - axios parameter creator
 * @export
 */
export const RetentionAreasApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreasControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/retention-areas`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RetentionAreasApi - functional programming interface
 * @export
 */
export const RetentionAreasApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RetentionAreasApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retentionAreasControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retentionAreasControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RetentionAreasApi - factory interface
 * @export
 */
export const RetentionAreasApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RetentionAreasApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retentionAreasControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .retentionAreasControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RetentionAreasApi - object-oriented interface
 * @export
 * @class RetentionAreasApi
 * @extends {BaseAPI}
 */
export class RetentionAreasApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RetentionAreasApi
   */
  public retentionAreasControllerFindAll(options?: any) {
    return RetentionAreasApiFp(this.configuration)
      .retentionAreasControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RoadSectionApi - axios parameter creator
 * @export
 */
export const RoadSectionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateRoadSectionDto} createRoadSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerCreate: async (
      createRoadSectionDto: CreateRoadSectionDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createRoadSectionDto' is not null or undefined
      assertParamExists(
        'roadSectionControllerCreate',
        'createRoadSectionDto',
        createRoadSectionDto
      );
      const localVarPath = `/api/road-section`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRoadSectionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roadSectionControllerFindOne', 'id', id);
      const localVarPath = `/api/road-section/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roadSectionControllerRemove', 'id', id);
      const localVarPath = `/api/road-section/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateRoadSectionDto} updateRoadSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerUpdate: async (
      id: number,
      updateRoadSectionDto: UpdateRoadSectionDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roadSectionControllerUpdate', 'id', id);
      // verify required parameter 'updateRoadSectionDto' is not null or undefined
      assertParamExists(
        'roadSectionControllerUpdate',
        'updateRoadSectionDto',
        updateRoadSectionDto
      );
      const localVarPath = `/api/road-section/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRoadSectionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoadSectionApi - functional programming interface
 * @export
 */
export const RoadSectionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoadSectionApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateRoadSectionDto} createRoadSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roadSectionControllerCreate(
      createRoadSectionDto: CreateRoadSectionDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roadSectionControllerCreate(
        createRoadSectionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roadSectionControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roadSectionControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roadSectionControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roadSectionControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateRoadSectionDto} updateRoadSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roadSectionControllerUpdate(
      id: number,
      updateRoadSectionDto: UpdateRoadSectionDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roadSectionControllerUpdate(
        id,
        updateRoadSectionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RoadSectionApi - factory interface
 * @export
 */
export const RoadSectionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoadSectionApiFp(configuration);
  return {
    /**
     *
     * @param {CreateRoadSectionDto} createRoadSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerCreate(
      createRoadSectionDto: CreateRoadSectionDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .roadSectionControllerCreate(createRoadSectionDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .roadSectionControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerRemove(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .roadSectionControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateRoadSectionDto} updateRoadSectionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionControllerUpdate(
      id: number,
      updateRoadSectionDto: UpdateRoadSectionDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .roadSectionControllerUpdate(id, updateRoadSectionDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoadSectionApi - object-oriented interface
 * @export
 * @class RoadSectionApi
 * @extends {BaseAPI}
 */
export class RoadSectionApi extends BaseAPI {
  /**
   *
   * @param {CreateRoadSectionDto} createRoadSectionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoadSectionApi
   */
  public roadSectionControllerCreate(
    createRoadSectionDto: CreateRoadSectionDto,
    options?: any
  ) {
    return RoadSectionApiFp(this.configuration)
      .roadSectionControllerCreate(createRoadSectionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoadSectionApi
   */
  public roadSectionControllerFindOne(id: number, options?: any) {
    return RoadSectionApiFp(this.configuration)
      .roadSectionControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoadSectionApi
   */
  public roadSectionControllerRemove(id: number, options?: any) {
    return RoadSectionApiFp(this.configuration)
      .roadSectionControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateRoadSectionDto} updateRoadSectionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoadSectionApi
   */
  public roadSectionControllerUpdate(
    id: number,
    updateRoadSectionDto: UpdateRoadSectionDto,
    options?: any
  ) {
    return RoadSectionApiFp(this.configuration)
      .roadSectionControllerUpdate(id, updateRoadSectionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RoadSectionsApi - axios parameter creator
 * @export
 */
export const RoadSectionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/road-sections`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoadSectionsApi - functional programming interface
 * @export
 */
export const RoadSectionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoadSectionsApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roadSectionsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.roadSectionsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RoadSectionsApi - factory interface
 * @export
 */
export const RoadSectionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoadSectionsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roadSectionsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .roadSectionsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoadSectionsApi - object-oriented interface
 * @export
 * @class RoadSectionsApi
 * @extends {BaseAPI}
 */
export class RoadSectionsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoadSectionsApi
   */
  public roadSectionsControllerFindAll(options?: any) {
    return RoadSectionsApiFp(this.configuration)
      .roadSectionsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SubmissionApi - axios parameter creator
 * @export
 */
export const SubmissionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateSubmissionDto} createSubmissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerCreate: async (
      createSubmissionDto: CreateSubmissionDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createSubmissionDto' is not null or undefined
      assertParamExists(
        'submissionControllerCreate',
        'createSubmissionDto',
        createSubmissionDto
      );
      const localVarPath = `/api/submission`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createSubmissionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('submissionControllerFindOne', 'id', id);
      const localVarPath = `/api/submission/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerRemove: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('submissionControllerRemove', 'id', id);
      const localVarPath = `/api/submission/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateSubmissionDto} updateSubmissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerUpdate: async (
      id: number,
      updateSubmissionDto: UpdateSubmissionDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('submissionControllerUpdate', 'id', id);
      // verify required parameter 'updateSubmissionDto' is not null or undefined
      assertParamExists(
        'submissionControllerUpdate',
        'updateSubmissionDto',
        updateSubmissionDto
      );
      const localVarPath = `/api/submission/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateSubmissionDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SubmissionApi - functional programming interface
 * @export
 */
export const SubmissionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SubmissionApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {CreateSubmissionDto} createSubmissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionControllerCreate(
      createSubmissionDto: CreateSubmissionDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionControllerCreate(
        createSubmissionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionControllerRemove(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {UpdateSubmissionDto} updateSubmissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionControllerUpdate(
      id: number,
      updateSubmissionDto: UpdateSubmissionDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionControllerUpdate(
        id,
        updateSubmissionDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SubmissionApi - factory interface
 * @export
 */
export const SubmissionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SubmissionApiFp(configuration);
  return {
    /**
     *
     * @param {CreateSubmissionDto} createSubmissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerCreate(
      createSubmissionDto: CreateSubmissionDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .submissionControllerCreate(createSubmissionDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerFindOne(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .submissionControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerRemove(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .submissionControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateSubmissionDto} updateSubmissionDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionControllerUpdate(
      id: number,
      updateSubmissionDto: UpdateSubmissionDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .submissionControllerUpdate(id, updateSubmissionDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SubmissionApi - object-oriented interface
 * @export
 * @class SubmissionApi
 * @extends {BaseAPI}
 */
export class SubmissionApi extends BaseAPI {
  /**
   *
   * @param {CreateSubmissionDto} createSubmissionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionApi
   */
  public submissionControllerCreate(
    createSubmissionDto: CreateSubmissionDto,
    options?: any
  ) {
    return SubmissionApiFp(this.configuration)
      .submissionControllerCreate(createSubmissionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionApi
   */
  public submissionControllerFindOne(id: number, options?: any) {
    return SubmissionApiFp(this.configuration)
      .submissionControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionApi
   */
  public submissionControllerRemove(id: number, options?: any) {
    return SubmissionApiFp(this.configuration)
      .submissionControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateSubmissionDto} updateSubmissionDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionApi
   */
  public submissionControllerUpdate(
    id: number,
    updateSubmissionDto: UpdateSubmissionDto,
    options?: any
  ) {
    return SubmissionApiFp(this.configuration)
      .submissionControllerUpdate(id, updateSubmissionDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SubmissionTypeCodeApi - axios parameter creator
 * @export
 */
export const SubmissionTypeCodeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionTypeCodeControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/submission-type-code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionTypeCodeControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('submissionTypeCodeControllerFindOne', 'id', id);
      const localVarPath = `/api/submission-type-code/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SubmissionTypeCodeApi - functional programming interface
 * @export
 */
export const SubmissionTypeCodeApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator = SubmissionTypeCodeApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionTypeCodeControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionTypeCodeControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionTypeCodeControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionTypeCodeControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SubmissionTypeCodeApi - factory interface
 * @export
 */
export const SubmissionTypeCodeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SubmissionTypeCodeApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionTypeCodeControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .submissionTypeCodeControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionTypeCodeControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .submissionTypeCodeControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SubmissionTypeCodeApi - object-oriented interface
 * @export
 * @class SubmissionTypeCodeApi
 * @extends {BaseAPI}
 */
export class SubmissionTypeCodeApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionTypeCodeApi
   */
  public submissionTypeCodeControllerFindAll(options?: any) {
    return SubmissionTypeCodeApiFp(this.configuration)
      .submissionTypeCodeControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionTypeCodeApi
   */
  public submissionTypeCodeControllerFindOne(id: number, options?: any) {
    return SubmissionTypeCodeApiFp(this.configuration)
      .submissionTypeCodeControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SubmissionsApi - axios parameter creator
 * @export
 */
export const SubmissionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionsControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/submissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SubmissionsApi - functional programming interface
 * @export
 */
export const SubmissionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SubmissionsApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async submissionsControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.submissionsControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SubmissionsApi - factory interface
 * @export
 */
export const SubmissionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SubmissionsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submissionsControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .submissionsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SubmissionsApi - object-oriented interface
 * @export
 * @class SubmissionsApi
 * @extends {BaseAPI}
 */
export class SubmissionsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SubmissionsApi
   */
  public submissionsControllerFindAll(options?: any) {
    return SubmissionsApiFp(this.configuration)
      .submissionsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerCreate: async (
      createUserDto: CreateUserDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUserDto' is not null or undefined
      assertParamExists('userControllerCreate', 'createUserDto', createUserDto);
      const localVarPath = `/api/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerFindOne: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerFindOne', 'id', id);
      const localVarPath = `/api/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemove: async (
      id: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerRemove', 'id', id);
      const localVarPath = `/api/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdate: async (
      id: string,
      updateUserDto: UpdateUserDto,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerUpdate', 'id', id);
      // verify required parameter 'updateUserDto' is not null or undefined
      assertParamExists('userControllerUpdate', 'updateUserDto', updateUserDto);
      const localVarPath = `/api/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerCreate(
      createUserDto: CreateUserDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreate(
        createUserDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerFindOne(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerRemove(
      id: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerRemove(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerUpdate(
      id: string,
      updateUserDto: UpdateUserDto,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate(
        id,
        updateUserDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerCreate(
      createUserDto: CreateUserDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .userControllerCreate(createUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerFindOne(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .userControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemove(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .userControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdate(
      id: string,
      updateUserDto: UpdateUserDto,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .userControllerUpdate(id, updateUserDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @param {CreateUserDto} createUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerCreate(createUserDto: CreateUserDto, options?: any) {
    return UserApiFp(this.configuration)
      .userControllerCreate(createUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerFindOne(id: string, options?: any) {
    return UserApiFp(this.configuration)
      .userControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerRemove(id: string, options?: any) {
    return UserApiFp(this.configuration)
      .userControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateUserDto} updateUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerUpdate(
    id: string,
    updateUserDto: UpdateUserDto,
    options?: any
  ) {
    return UserApiFp(this.configuration)
      .userControllerUpdate(id, updateUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WorkflowStateCodeApi - axios parameter creator
 * @export
 */
export const WorkflowStateCodeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowStateCodeControllerFindAll: async (
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/workflow-state-code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowStateCodeControllerFindOne: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('workflowStateCodeControllerFindOne', 'id', id);
      const localVarPath = `/api/workflow-state-code/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WorkflowStateCodeApi - functional programming interface
 * @export
 */
export const WorkflowStateCodeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WorkflowStateCodeApiAxiosParamCreator(
    configuration
  );
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workflowStateCodeControllerFindAll(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workflowStateCodeControllerFindAll(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workflowStateCodeControllerFindOne(
      id: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workflowStateCodeControllerFindOne(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * WorkflowStateCodeApi - factory interface
 * @export
 */
export const WorkflowStateCodeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = WorkflowStateCodeApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowStateCodeControllerFindAll(options?: any): AxiosPromise<void> {
      return localVarFp
        .workflowStateCodeControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workflowStateCodeControllerFindOne(
      id: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .workflowStateCodeControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WorkflowStateCodeApi - object-oriented interface
 * @export
 * @class WorkflowStateCodeApi
 * @extends {BaseAPI}
 */
export class WorkflowStateCodeApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowStateCodeApi
   */
  public workflowStateCodeControllerFindAll(options?: any) {
    return WorkflowStateCodeApiFp(this.configuration)
      .workflowStateCodeControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowStateCodeApi
   */
  public workflowStateCodeControllerFindOne(id: number, options?: any) {
    return WorkflowStateCodeApiFp(this.configuration)
      .workflowStateCodeControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
